# Rules set for device id: bb67-ebc1-6081-c922 from IP 176.60.176.90
# Updated 2015-10-03 15:01:54

# RULE 1 Reload (action)
MATCHED_RULE1='0'
if [[ $ACTION_RECEIVED == "Reload" ]]
then
 MATCHED_RULE1="1"
fi


# RULE 1 ACTIONS
if [[ "$MATCHED_RULE1" == "1" ]]
then

#Action 1.1 (custom) 
echo "" > $DATA_PATH/reboot
fi


# RULE 2 cfgMdm_No (action)
MATCHED_RULE2='0'
if [[ $ACTION_RECEIVED == "cfgMdm_No" ]]
then
 MATCHED_RULE2="1"
fi


# RULE 2 ACTIONS
if [[ "$MATCHED_RULE2" == "1" ]]
then

#Action 2.1 (var) 
echo "Updating variable: cfgMdm to No"
SAVE_DATA="No"
echo -n "$SAVE_DATA">$DATA_PATH/cfgMdm.dat
fi


# RULE 3 cfgMdm_Yes (action)
MATCHED_RULE3='0'
if [[ $ACTION_RECEIVED == "cfgMdm_Yes" ]]
then
 MATCHED_RULE3="1"
fi


# RULE 3 ACTIONS
if [[ "$MATCHED_RULE3" == "1" ]]
then

#Action 3.1 (var) 
echo "Updating variable: cfgMdm to Yes"
SAVE_DATA="Yes"
echo -n "$SAVE_DATA">$DATA_PATH/cfgMdm.dat
fi


# RULE 4 cfgThingspeak_No (action)
MATCHED_RULE4='0'
if [[ $ACTION_RECEIVED == "cfgThingspeak_No" ]]
then
 MATCHED_RULE4="1"
fi


# RULE 4 ACTIONS
if [[ "$MATCHED_RULE4" == "1" ]]
then

#Action 4.1 (var) 
echo "Updating variable: cfgThingspeak to No"
SAVE_DATA="No"
echo -n "$SAVE_DATA">$DATA_PATH/cfgThingspeak.dat
fi


# RULE 5 cfgThingspeak_Yes (action)
MATCHED_RULE5='0'
if [[ $ACTION_RECEIVED == "cfgThingspeak_Yes" ]]
then
 MATCHED_RULE5="1"
fi


# RULE 5 ACTIONS
if [[ "$MATCHED_RULE5" == "1" ]]
then

#Action 5.1 (var) 
echo "Updating variable: cfgThingspeak to Yes"
SAVE_DATA="Yes"
echo -n "$SAVE_DATA">$DATA_PATH/cfgThingspeak.dat
fi


# RULE 6 cfgHwork_No (action)
MATCHED_RULE6='0'
if [[ $ACTION_RECEIVED == "cfgHwork_No" ]]
then
 MATCHED_RULE6="1"
fi


# RULE 6 ACTIONS
if [[ "$MATCHED_RULE6" == "1" ]]
then

#Action 6.1 (clear_timer) 
echo "Clear timer: TimerHcycle"
rm -f $DATA_PATH/TimerHcycle-*.timer

#Action 6.2 (clear_timer) 
echo "Clear timer: TimerHpause"
rm -f $DATA_PATH/TimerHpause-*.timer

#Action 6.3 (custom) 
echo 0 > /sys/class/gpio/gpio0/value

#Action 6.4 (custom) 
echo 1 > /sys/class/gpio/gpio4/value

#Action 6.5 (var) 
echo "Updating variable: cfgHwork to 0"
SAVE_DATA="0"
echo -n "$SAVE_DATA">$DATA_PATH/cfgHwork.dat

#Action 6.6 (var) 
echo "Updating variable: Hcycle to 0"
SAVE_DATA="0"
echo -n "$SAVE_DATA">$DATA_PATH/Hcycle.dat

#Action 6.7 (var) 
echo "Updating variable: Hpause to 0"
SAVE_DATA="0"
echo -n "$SAVE_DATA">$DATA_PATH/Hpause.dat
fi


# RULE 7 cfgHwork_Yes (action)
MATCHED_RULE7='0'
if [[ $ACTION_RECEIVED == "cfgHwork_Yes" ]]
then
 MATCHED_RULE7="1"
fi


# RULE 7 CONDITIONS
#Condition 7.1 (var) 
TEST_VARIABLE=`cat $DATA_PATH/cfgHwork.dat`
if [[ $TEST_VARIABLE -ne "0" ]]
then
 MATCHED_RULE7="0"
fi


# RULE 7 ACTIONS
if [[ "$MATCHED_RULE7" == "1" ]]
then

#Action 7.1 (clear_timer) 
echo "Clear timer: TimerHcycle"
rm -f $DATA_PATH/TimerHcycle-*.timer

#Action 7.2 (clear_timer) 
echo "Clear timer: TimerHpause"
rm -f $DATA_PATH/TimerHpause-*.timer

#Action 7.3 (var) 
echo "Updating variable: cfgHwork to 1"
SAVE_DATA="1"
echo -n "$SAVE_DATA">$DATA_PATH/cfgHwork.dat

#Action 7.4 (var) 
echo "Updating variable: Hcycle to 0"
SAVE_DATA="0"
echo -n "$SAVE_DATA">$DATA_PATH/Hcycle.dat

#Action 7.5 (var) 
echo "Updating variable: Hpause to 0"
SAVE_DATA="0"
echo -n "$SAVE_DATA">$DATA_PATH/Hpause.dat
fi


# RULE 8 StartFanManualFun (action)
MATCHED_RULE8='0'
if [[ $ACTION_RECEIVED == "StartFanManualFun" ]]
then
 MATCHED_RULE8="1"
fi


# RULE 8 CONDITIONS
#Condition 8.1 (var) 
TEST_VARIABLE=`cat $DATA_PATH/Fan.dat`
if [[ $TEST_VARIABLE -ne "0" ]]
then
 MATCHED_RULE8="0"
fi


# RULE 8 ACTIONS
if [[ "$MATCHED_RULE8" == "1" ]]
then

#Action 8.1 (custom) 
echo 1 > /sys/class/gpio/gpio0/value

#Action 8.2 (custom) 
echo 0 > /sys/class/gpio/gpio4/value

#Action 8.3 (set_timer) 
echo "Setting timer: StopFanManual"
rm -f $DATA_PATH/StopFanManual-*.timer
TIMEOUT="$(date +%s)"
let TIMEOUT+=7200
echo -n "StopFanManualFun">$DATA_PATH/StopFanManual-$TIMEOUT.timer
fi


# RULE 9 StopFanManualFun (action)
MATCHED_RULE9='0'
if [[ $ACTION_RECEIVED == "StopFanManualFun" ]]
then
 MATCHED_RULE9="1"
fi


# RULE 9 CONDITIONS
#Condition 9.1 (var) 
TEST_VARIABLE=`cat $DATA_PATH/Fan.dat`
if [[ $TEST_VARIABLE -ne "1" ]]
then
 MATCHED_RULE9="0"
fi


# RULE 9 ACTIONS
if [[ "$MATCHED_RULE9" == "1" ]]
then

#Action 9.1 (custom) 
echo 1 > /sys/class/gpio/gpio4/value

#Action 9.2 (custom) 
echo 0 > /sys/class/gpio/gpio0/value

#Action 9.3 (clear_timer) 
echo "Clear timer: StopFanManual"
rm -f $DATA_PATH/StopFanManual-*.timer
fi


# RULE 10 TimerHcycleFun (action)
MATCHED_RULE10='0'
if [[ $ACTION_RECEIVED == "TimerHcycleFun" ]]
then
 MATCHED_RULE10="1"
fi


# RULE 10 ACTIONS
if [[ "$MATCHED_RULE10" == "1" ]]
then

#Action 10.1 (custom) 
echo 0 > /sys/class/gpio/gpio0/value

#Action 10.2 (custom) 
echo 1 > /sys/class/gpio/gpio4/value

#Action 10.3 (var) 
echo "Updating variable: Hcycle to 0"
SAVE_DATA="0"
echo -n "$SAVE_DATA">$DATA_PATH/Hcycle.dat

#Action 10.4 (var) 
echo "Updating variable: Hpause to 1"
SAVE_DATA="1"
echo -n "$SAVE_DATA">$DATA_PATH/Hpause.dat

#Action 10.5 (set_timer) 
echo "Setting timer: TimerHpause"
rm -f $DATA_PATH/TimerHpause-*.timer
TIMEOUT="$(date +%s)"
let TIMEOUT+=300
echo -n "TimerHpauseFun">$DATA_PATH/TimerHpause-$TIMEOUT.timer
fi


# RULE 11 TimerHpauseFun (action)
MATCHED_RULE11='0'
if [[ $ACTION_RECEIVED == "TimerHpauseFun" ]]
then
 MATCHED_RULE11="1"
fi


# RULE 11 ACTIONS
if [[ "$MATCHED_RULE11" == "1" ]]
then

#Action 11.1 (var) 
echo "Updating variable: Hpause to 0"
SAVE_DATA="0"
echo -n "$SAVE_DATA">$DATA_PATH/Hpause.dat
fi


# RULE 12 Остановка Вентилятра (regex)
MATCHED_RULE12='0'
REGEX='CYCLE'
if [[ $LINE =~ $REGEX ]]
then
 MATCHED_RULE12="1"
fi


# RULE 12 CONDITIONS
#Condition 12.1 (var) 
TEST_VARIABLE=`cat $DATA_PATH/Hcycle.dat`
if [[ $TEST_VARIABLE -ne "1" ]]
then
 MATCHED_RULE12="0"
fi

#Condition 12.2 (var) 
TEST_VARIABLE=`cat $DATA_PATH/HcellarI.dat`
if [[ $TEST_VARIABLE -gt "90" ]]
then
 MATCHED_RULE12="0"
fi


# RULE 12 ACTIONS
if [[ "$MATCHED_RULE12" == "1" ]]
then

#Action 12.1 (custom) 
echo 0 > /sys/class/gpio/gpio0/value

#Action 12.2 (custom) 
echo 1 > /sys/class/gpio/gpio4/value

#Action 12.3 (clear_timer) 
echo "Clear timer: TimerHcycle"
rm -f $DATA_PATH/TimerHcycle-*.timer

#Action 12.4 (set_timer) 
echo "Setting timer: TimerHpause"
rm -f $DATA_PATH/TimerHpause-*.timer
TIMEOUT="$(date +%s)"
let TIMEOUT+=300
echo -n "TimerHpauseFun">$DATA_PATH/TimerHpause-$TIMEOUT.timer

#Action 12.5 (var) 
echo "Updating variable: Hcycle to 0"
SAVE_DATA="0"
echo -n "$SAVE_DATA">$DATA_PATH/Hcycle.dat

#Action 12.6 (var) 
echo "Updating variable: Hpause to 1"
SAVE_DATA="1"
echo -n "$SAVE_DATA">$DATA_PATH/Hpause.dat
fi


# RULE 13 Запуск вентилятора (regex)
MATCHED_RULE13='0'
REGEX='CYCLE'
if [[ $LINE =~ $REGEX ]]
then
 MATCHED_RULE13="1"
fi


# RULE 13 CONDITIONS
#Condition 13.1 (var) 
TEST_VARIABLE=`cat $DATA_PATH/cfgHwork.dat`
if [[ $TEST_VARIABLE -ne "1" ]]
then
 MATCHED_RULE13="0"
fi

#Condition 13.2 (var) 
TEST_VARIABLE=`cat $DATA_PATH/Hcycle.dat`
if [[ $TEST_VARIABLE -ne "0" ]]
then
 MATCHED_RULE13="0"
fi

#Condition 13.3 (var) 
TEST_VARIABLE=`cat $DATA_PATH/Hpause.dat`
if [[ $TEST_VARIABLE -ne "0" ]]
then
 MATCHED_RULE13="0"
fi

#Condition 13.4 (var) 
TEST_VARIABLE=`cat $DATA_PATH/HcellarI.dat`
if [[ $TEST_VARIABLE -lt "95" ]]
then
 MATCHED_RULE13="0"
fi


# RULE 13 ACTIONS
if [[ "$MATCHED_RULE13" == "1" ]]
then

#Action 13.1 (custom) 
echo 1 > /sys/class/gpio/gpio0/value

#Action 13.2 (custom) 
echo 0 > /sys/class/gpio/gpio4/value

#Action 13.3 (set_timer) 
echo "Setting timer: TimerHcycle"
rm -f $DATA_PATH/TimerHcycle-*.timer
TIMEOUT="$(date +%s)"
let TIMEOUT+=1200
echo -n "TimerHcycleFun">$DATA_PATH/TimerHcycle-$TIMEOUT.timer

#Action 13.4 (var) 
echo "Updating variable: Hcycle to 1"
SAVE_DATA="1"
echo -n "$SAVE_DATA">$DATA_PATH/Hcycle.dat
fi


# RULE 14 Остановить вентилятор вручную (regex)
MATCHED_RULE14='0'
REGEX='CYCLE'
if [[ $LINE =~ $REGEX ]]
then
 MATCHED_RULE14="1"
fi


# RULE 14 CONDITIONS
#Condition 14.1 (var) 
TEST_VARIABLE=`cat $DATA_PATH/Fan.dat`
if [[ $TEST_VARIABLE -ne "1" ]]
then
 MATCHED_RULE14="0"
fi

#Condition 14.2 (var) 
TEST_VARIABLE=`cat $DATA_PATH/Button.dat`
if [[ $TEST_VARIABLE -ne "0" ]]
then
 MATCHED_RULE14="0"
fi


# RULE 14 ACTIONS
if [[ "$MATCHED_RULE14" == "1" ]]
then

#Action 14.1 (action) 
echo "Action added: StopFanManualFun"
echo -n "StopFanManualFun">$DATA_PATH/incoming_action.txt
fi


# RULE 15 Запустить вентилятр вручную (regex)
MATCHED_RULE15='0'
REGEX='CYCLE'
if [[ $LINE =~ $REGEX ]]
then
 MATCHED_RULE15="1"
fi


# RULE 15 CONDITIONS
#Condition 15.1 (var) 
TEST_VARIABLE=`cat $DATA_PATH/Fan.dat`
if [[ $TEST_VARIABLE -ne "0" ]]
then
 MATCHED_RULE15="0"
fi

#Condition 15.2 (var) 
TEST_VARIABLE=`cat $DATA_PATH/Button.dat`
if [[ $TEST_VARIABLE -ne "0" ]]
then
 MATCHED_RULE15="0"
fi


# RULE 15 ACTIONS
if [[ "$MATCHED_RULE15" == "1" ]]
then

#Action 15.1 (action) 
echo "Action added: StartFanManualFun"
echo -n "StartFanManualFun">$DATA_PATH/incoming_action.txt
fi


# RULE 16 LogDmesg (action)
MATCHED_RULE16='0'
if [[ $ACTION_RECEIVED == "LogDmesg" ]]
then
 MATCHED_RULE16="1"
fi


# RULE 16 ACTIONS
if [[ "$MATCHED_RULE16" == "1" ]]
then

#Action 16.1 (custom) 
dmesg > /home/dmesg_log
fi


# RULE 17 LogLog (action)
MATCHED_RULE17='0'
if [[ $ACTION_RECEIVED == "LogLog" ]]
then
 MATCHED_RULE17="1"
fi


# RULE 17 ACTIONS
if [[ "$MATCHED_RULE17" == "1" ]]
then

#Action 17.1 (custom) 
logread > /home/log_log
fi


# RULE 18 SystemReboot (action)
MATCHED_RULE18='0'
if [[ $ACTION_RECEIVED == "SystemReboot" ]]
then
 MATCHED_RULE18="1"
fi


# RULE 18 ACTIONS
if [[ "$MATCHED_RULE18" == "1" ]]
then

#Action 18.1 (custom) 
reboot
fi



#Checking timers

TIMENOW="$(date +%s)"
FILES=$DATA_PATH/*.timer
REGEX='-([0-9]+).timer$'
for f in $FILES
do
FNAME=${f##*/}
if [[ $FNAME =~ $REGEX ]]
then
 TIMEOUT=${BASH_REMATCH[1]}
 DIFF=$(($TIMENOW-$TIMEOUT))
 if [ $DIFF -gt 0 ]; then
  #time passed
  TIMER_ACTION=`cat $DATA_PATH/$FNAME`
  echo "Action added: $TIMER_ACTION"
  echo -n "$TIMER_ACTION">$DATA_PATH/incoming_action.txt
  echo "Deleting $FNAME"
  rm -f $DATA_PATH/$FNAME
 fi
fi
done
